<FocusView
      title="Create new subscription schedule"
      shown={showDataInput}
      onClose={() => setShowDataInput(false)}
      primaryAction={<Button type='primary' onPress={createSchedule} >Save</Button>}
      secondaryAction={<Button onPress={() => setShowDataInput(false)}>Cancel</Button>}
      >
        
       {items.map((i, index) => {
        return (
          <Box
          css={{
            width:'fill',
            paddingY:'small',
            //paddingRight:"xlarge",
            background: "container",
            marginY:"large",
          }}
          key={i.id}>
            <Inline></Inline>
            <Select 
            name='product'
            label='Select a product & price'
            aria-label="select product and price"
            onChange={(e) => {
              const price = e.target.value;
              setItems(currentItem => 
                produce(currentItem, v => {
                  v[index].price = price;
                })
              );
            }} value={i.price}>
              {prices?.map((price) => (
                <option
                key={price.id}
                value={price.id}
                id={price.id}>{`${price.product?.name} - ${price?.nickname} - ${("$"+ price?.unit_amount/100)}`}</option>
              ))}
            </Select>
            <Box
        css={{
          paddingY:'small',
          stack:'x',
        }}>      
          <Box css={{width:'1/2', paddingRight:'xsmall'}}>
           <Select
           onChange={(e) => {
            const discount = e.target.value;
            setItems(currentItem => 
              produce(currentItem, v => {
                v[index].coupon = discount;
              })
            );
          }}
            name="discount"
            label="Select a discount to apply"
          >
            {coupons?.map((discount) => (
              <option
              key={discount.id}
              value={discount.id}
              id={discount.id}>{discount.name}</option>
            ))}
          </Select>
          </Box>
          <Box css={{width:'1/2', paddingLeft:'xsmall'}}>
          <Select
            name="cycle"
            label="Number of iterations"
            onChange={(e) => {
              const iteration = e.target.value;
              setItems(currentItem => 
                produce(currentItem, v => {
                  v[index].iterations = iteration;
                })
              );
            }}
          >
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="ongoing">Ongoing</option>
          </Select>
          </Box>
          
      </Box>
   
          </Box>
          
        )})}
  
        <Box
        css={{
          paddingTop:'large',
          paddingBottom:'large',
        }}>
          <Button
          type="primary"
          onClick={() => {
            setItems(currentItem => [...currentItem, {
              id:generate(),
            }])
          }}
          css={{
            width: 'fill',
            alignX: 'center'
          }}
          >Add Phase</Button>
        </Box>
        
      </FocusView>